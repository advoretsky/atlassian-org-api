// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// Billable status of User in Atlassian Access
	AccessBillable bool `json:"access_billable,omitempty"`

	// The account ID for the user. The format is a-zA-Z0-9_|-:{1,128}
	// Required: true
	AccountID *string `json:"account_id"`

	// The lifecycle status of the account
	//
	// Valid values: `active`, `inactive, `closed`
	//
	// Required: true
	AccountStatus *string `json:"account_status"`

	// Valid values: `atlassian`, `customer`, `app`
	//
	// Required: true
	AccountType *string `json:"account_type"`

	// The email address of the user. If the user has restricted visibility of the email address, the
	// property will be absent
	//
	Email string `json:"email,omitempty"`

	// Last active date for a user
	LastActive string `json:"last_active,omitempty"`

	// The display name of the user. Should be used for contextual rendering of the authorship in content.
	// If the user has restricted visibility of their name, their nickname will be displayed as a
	// substitute value
	//
	// Required: true
	Name *string `json:"name"`

	// The absolute URI (RFC3986) to the avatar name of the user. Should be used for contextual rendering
	// of the authorship in content. If the user has restricted visibility of their avatar, an alternative
	// URI will be provided as a substitute value
	//
	// Required: true
	Picture *string `json:"picture"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *User) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AccessBillable bool `json:"access_billable,omitempty"`

		AccountID *string `json:"account_id"`

		AccountStatus *string `json:"account_status"`

		AccountType *string `json:"account_type"`

		Email string `json:"email,omitempty"`

		LastActive string `json:"last_active,omitempty"`

		Name *string `json:"name"`

		Picture *string `json:"picture"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AccessBillable = dataAO0.AccessBillable

	m.AccountID = dataAO0.AccountID

	m.AccountStatus = dataAO0.AccountStatus

	m.AccountType = dataAO0.AccountType

	m.Email = dataAO0.Email

	m.LastActive = dataAO0.LastActive

	m.Name = dataAO0.Name

	m.Picture = dataAO0.Picture

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m User) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AccessBillable bool `json:"access_billable,omitempty"`

		AccountID *string `json:"account_id"`

		AccountStatus *string `json:"account_status"`

		AccountType *string `json:"account_type"`

		Email string `json:"email,omitempty"`

		LastActive string `json:"last_active,omitempty"`

		Name *string `json:"name"`

		Picture *string `json:"picture"`
	}

	dataAO0.AccessBillable = m.AccessBillable

	dataAO0.AccountID = m.AccountID

	dataAO0.AccountStatus = m.AccountStatus

	dataAO0.AccountType = m.AccountType

	dataAO0.Email = m.Email

	dataAO0.LastActive = m.LastActive

	dataAO0.Name = m.Name

	dataAO0.Picture = m.Picture

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePicture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *User) validateAccountStatus(formats strfmt.Registry) error {

	if err := validate.Required("account_status", "body", m.AccountStatus); err != nil {
		return err
	}

	return nil
}

func (m *User) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("account_type", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePicture(formats strfmt.Registry) error {

	if err := validate.Required("picture", "body", m.Picture); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
