// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetOrgIDUsersParams creates a new GetOrgIDUsersParams object
// with the default values initialized.
func NewGetOrgIDUsersParams() *GetOrgIDUsersParams {
	var ()
	return &GetOrgIDUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrgIDUsersParamsWithTimeout creates a new GetOrgIDUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrgIDUsersParamsWithTimeout(timeout time.Duration) *GetOrgIDUsersParams {
	var ()
	return &GetOrgIDUsersParams{

		timeout: timeout,
	}
}

// NewGetOrgIDUsersParamsWithContext creates a new GetOrgIDUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrgIDUsersParamsWithContext(ctx context.Context) *GetOrgIDUsersParams {
	var ()
	return &GetOrgIDUsersParams{

		Context: ctx,
	}
}

// NewGetOrgIDUsersParamsWithHTTPClient creates a new GetOrgIDUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrgIDUsersParamsWithHTTPClient(client *http.Client) *GetOrgIDUsersParams {
	var ()
	return &GetOrgIDUsersParams{
		HTTPClient: client,
	}
}

/*GetOrgIDUsersParams contains all the parameters to send to the API endpoint
for the get org ID users operation typically these are written to a http.Request
*/
type GetOrgIDUsersParams struct {

	/*Cursor
	  Sets the starting point for the page of results to return.

	*/
	Cursor *string
	/*OrgID
	  ID of the organization to query

	*/
	OrgID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get org ID users params
func (o *GetOrgIDUsersParams) WithTimeout(timeout time.Duration) *GetOrgIDUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get org ID users params
func (o *GetOrgIDUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get org ID users params
func (o *GetOrgIDUsersParams) WithContext(ctx context.Context) *GetOrgIDUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get org ID users params
func (o *GetOrgIDUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get org ID users params
func (o *GetOrgIDUsersParams) WithHTTPClient(client *http.Client) *GetOrgIDUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get org ID users params
func (o *GetOrgIDUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the get org ID users params
func (o *GetOrgIDUsersParams) WithCursor(cursor *string) *GetOrgIDUsersParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get org ID users params
func (o *GetOrgIDUsersParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithOrgID adds the orgID to the get org ID users params
func (o *GetOrgIDUsersParams) WithOrgID(orgID string) *GetOrgIDUsersParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the get org ID users params
func (o *GetOrgIDUsersParams) SetOrgID(orgID string) {
	o.OrgID = orgID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrgIDUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	// path param orgId
	if err := r.SetPathParam("orgId", o.OrgID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
